alias ls='ls -F'
#  Override the Ruby info command
##alias ri='/Users/russ/bin/ri'
#  Mac OSX: prevent Terminal window from losing focus
alias java='java -Djava.awt.headless=true'

alias top='top -l 1 -n 20 -ncols 12'

## 02/08/2s; Trying out iterm2 + tmux with terminal Vim
##           - Solarized Light works in iterm2, tmux, and Vim
##           - If vim-slime works with tmux, will get rid of MacVim
## 11/05/21; Switched to MacVim to get the light Solarized background color
##           that terminal mode vim can't get (too yellow).
##           "--remote-silent" is so that the same window is used.
##export PATH="$PATH:/Applications/MacVim.app/Contents/bin"
##alias vi='mvim --remote-silent'
##alias vim='mvim --remote-silent'
##alias view='mvim -R --remote-silent'
alias vi=myvim
alias vim=myvim
alias view='myvim -R'
alias nvim='nv'

# Add fnl and web file types to ripgrep.
alias rg='RIPGREP_CONFIG_PATH=~/.ripgreprc rg'

## 02/08/22; Switch to tmux2; start: "tmux new -A -s repl"
## 11/19/21; Started to use screen to run MIT Scheme with vim-slime. This is
##           a convenience alias.
#alias chk-screen="screen -ls"
# tmux: repl is an arbitrary name I'm using. I'll split a window into top
#       and bottom panes to run a repl in the bottom on. vim-slime can address
#       the bottom pane as target using {bottom} instead of the pane number.
##alias start-tmux="tmux new -A -s repl"
##alias chk-tmux="tmux ls"

# ldd equivalent
alias ldd='otool -L'

# For golang
export PATH=$PATH:/usr/local/go/bin
#  Go tools should be installed under the default GOPATH
#  GOPATH defaults to a ~/go (see go help gopath)
export PATH=$PATH:~/go/bin

# For Subversion 1.6.x -- Xcode one doesn't have JavaHL so get brew's one to
#                      -- work with Subclipse
#SVN_1_6=/Applications/Xcode.app/Contents/Developer/usr/subversion-1.6
#export PATH=$SVN_1_6/bin:$PATH

# Maven and Gradle build tools
#export PATH=$PATH:~russ/apache-maven-3.6.3/bin
#export PATH=$PATH:~russ/gradle-5.6.2/bin

# For brew stuff to override Xcode
export PATH="/usr/local/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"

# Enable man for XCode tools
export MANPATH=$MANPATH:/Library/Developer/CommandLineTools/usr/share/man
# Enable man for XCode SDKs
export MANPATH=$MANPATH:/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/share/man
# Enable man for Brew commands
export MANPATH=$MANPATH:/usr/local/share/man
# Enable man for postgresql
export MANPATH=$MANPATH:/usr/local/opt/postgresql\@15/share/man

# For Clojure via Leiningen
# Using brew clojure instead for clojure and clj.
#alias clojure='java -jar ~/.lein/self-installs/leiningen-2.7.1-standalone.jar '

# For Scala - use SDKman
# For Ant - use SDKman

# For Oracle SQL Developer command line client
#SQLDEV_HOME=/Applications/SQLDeveloper.app/Contents/Resources/sqldeveloper/sqldeveloper
#alias sqlcl=$SQLDEV_HOME/bin/sql

# For Oracle Instant Client and SQL/Plus
#export ORACLE_HOME=/Users/russ/instantclient_12_2
#export PATH=$ORACLE_HOME:$PATH
#export DYLD_LIBRARY_PATH=$ORACLE_HOME

# raise the max number of open files for Jupyter Lab
ulimit -n 1000

# For Racket
RACKET_HOME=/Applications/Racket
export PATH=$RACKET_HOME/bin:$PATH

# For my stuff; put before conda to have my stuff take precedence
export PATH=$HOME/bin:$PATH


# added for rbenv
#if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

# added for nodenv
#if which nodenv > /dev/null; then eval "$(nodenv init -)"; fi

# added for direnv
eval "$(direnv hook bash)"

#  12/14/2022: https://github.com/direnv/direnv/wiki/Python#restoring-the-ps1
show_virtual_env() {
  if [[ -n "$CONDA_DEFAULT_ENV" && -n "$DIRENV_DIR" ]]; then
    echo "($(basename $CONDA_DEFAULT_ENV)) "
  fi
}
export -f show_virtual_env
#PS1='$(show_virtual_env)'$PS1

# added for VSCode
# 09/20/22: removed VSCode
#export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# Old: Use the full path for version installed in /Library/Java/JavaVirtualMachine
# 05/19/22: The old way used with pkg installer requires /usr/libexec/java_home.
#export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
#export JAVA_HOME=$(/usr/libexec/java_home -v 11)
# 05/19/22: The new way used with archive file (.tar.gz).
export JAVA_HOME=/usr/local/Java/jdk8u362-b09/Contents/Home
#export JAVA_HOME=/usr/local/Java/jdk-17.0.6+10/Contents/Home

export PATH="$JAVA_HOME/bin:$PATH"

#  To silence warnings about zsh not being the default login shell
export BASH_SILENCE_DEPRECATION_WARNING=1

# To clear scrollback of a kitty terminal emulator window.
#   - https://github.com/kovidgoyal/kitty/issues/268
alias cls="printf '\E[H\E[3J'"

# For kitty terminal emulator to set the tab title to the tty number.
tab_title() {
    echo  "\033]2;$1\007\c"
}

st() {
    #echo  "\033]2;$(tty | sed 's?/dev/??')\007\c"
    #echo  "\033]2;$(tty | sed 's?.*/??')\007\c"
    tab_title $(tty | sed 's?.*/??')
}
# End of For kitty terminal emulator to set the tab title to the tty number.

#  Used in bash prompt
#  - https://danishpraka.sh/2018/07/06/git-branch-zsh.html
git_branch() {
    branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
    if [[ $branch == "" ]]; then
        :
    else
        echo '('$branch')'
    fi
}

#  Color prompt: inverse light cyan with Git branch
#  NOTE: Be sure that non-printable sequences are enclosed in \[ and \].
#  - https://linuxhostsupport.com/blog/how-to-change-the-color-of-your-linux-prompt/
#export PS1='\[\033[7;36m\]\w $(git_branch)\[\033[00m\] $ '
#  - adapted from Suz Hinton's bash prompt.
##export PS1='\[\033[0;36m\]\W \[\033[0;35m\]$(git_branch)\[\033[00m\]$ '
# For kitty to also set the tab title to the tty number.
##export PS1='\[\033]2;$(tty | sed 's?.*/??')\007\033[0;36m\]\W \[\033[0;35m\]$(git_branch)\[\033[00m\]$ '
# For kitty to also set the tab title to the current directory.
export PS1='\[\033]2;$(basename $(pwd))\007\033[0;36m\]\W \[\033[0;35m\]$(git_branch)\[\033[00m\]$ '
#  Added for direnv & show_virtual_env()
export PS1='$(show_virtual_env)'$PS1

# PostgresQL
export PATH=$PATH:/usr/local/opt/postgresql@15/bin

# cl-repl (Common Lisp via koji/kojiro/cl-repl and roswell pkg mgr)
export PATH=$PATH:~/.roswell/bin


##THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
##export SDKMAN_DIR="/Users/russ/.sdkman"
##[[ -s "/Users/russ/.sdkman/bin/sdkman-init.sh" ]] && source "/Users/russ/.sdkman/bin/sdkman-init.sh"

# Don't use because I keep hitting something in nvim that pops it up.
## Add fzf binary's directory
#FZF_HOME=/Users/russ/.vim/pack/bundle/start/fzf
#export PATH="$PATH:$FZF_HOME/bin"


# 02/01/22: Manage Node versions and friends; instead of nodenv.
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE='/Users/russ/.local/bin/micromamba';
export MAMBA_ROOT_PREFIX='/Users/russ/micromamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell bash --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from mamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<
